{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nconst useFetchAlbums = () => {\n  _s();\n  const [selectedAlbumId, setSelectedAlbumId] = useState(null);\n  const [tracks, setTracks] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const toggleTracks = async albumId => {\n    if (selectedAlbumId === albumId) {\n      setSelectedAlbumId(null);\n      return;\n    }\n    setSelectedAlbumId(albumId);\n    if (!tracks[albumId]) {\n      setLoading(true);\n      setError(null);\n      try {\n        const response = await axios.get(`https://cors-anywhere.herokuapp.com/https://api.deezer.com/album/${albumId}/tracks`);\n        setTracks(prev => ({\n          ...prev,\n          [albumId]: response.data.data\n        }));\n      } catch (err) {\n        setError(err);\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n  return {\n    selectedAlbumId,\n    tracks,\n    loading,\n    error,\n    toggleTracks\n  };\n};\n_s(useFetchAlbums, \"M2StRLmV/+4Ico1m27wEDxxOo9U=\");\nexport default useFetchAlbums;","map":{"version":3,"names":["useState","axios","useFetchAlbums","_s","selectedAlbumId","setSelectedAlbumId","tracks","setTracks","loading","setLoading","error","setError","toggleTracks","albumId","response","get","prev","data","err","console"],"sources":["C:/Users/Fernando/Documents/React/GroovesLibrarypt2/grooveslibrarypt2/src/hooks/useFetchAlbums.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst useFetchAlbums = () => {\r\n  const [selectedAlbumId, setSelectedAlbumId] = useState(null);\r\n  const [tracks, setTracks] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  \r\n\r\n  const toggleTracks = async (albumId) => {\r\n    if (selectedAlbumId === albumId) {\r\n      setSelectedAlbumId(null);\r\n      return;\r\n    }\r\n\r\n    setSelectedAlbumId(albumId);\r\n\r\n    if (!tracks[albumId]) {\r\n      setLoading(true);\r\n      setError(null);\r\n      try {\r\n        const response = await axios.get(\r\n          `https://cors-anywhere.herokuapp.com/https://api.deezer.com/album/${albumId}/tracks`\r\n        );\r\n        setTracks((prev) => ({ ...prev, [albumId]: response.data.data }));\r\n      } catch (err) {\r\n        setError(err);\r\n        console.error(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  return { selectedAlbumId, tracks, loading, error, toggleTracks };\r\n};\r\n\r\nexport default useFetchAlbums;\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACM,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAGxC,MAAMY,YAAY,GAAG,MAAOC,OAAO,IAAK;IACtC,IAAIT,eAAe,KAAKS,OAAO,EAAE;MAC/BR,kBAAkB,CAAC,IAAI,CAAC;MACxB;IACF;IAEAA,kBAAkB,CAACQ,OAAO,CAAC;IAE3B,IAAI,CAACP,MAAM,CAACO,OAAO,CAAC,EAAE;MACpBJ,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,IAAI;QACF,MAAMG,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAC9B,oEAAoEF,OAAO,SAC7E,CAAC;QACDN,SAAS,CAAES,IAAI,KAAM;UAAE,GAAGA,IAAI;UAAE,CAACH,OAAO,GAAGC,QAAQ,CAACG,IAAI,CAACA;QAAK,CAAC,CAAC,CAAC;MACnE,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZP,QAAQ,CAACO,GAAG,CAAC;QACbC,OAAO,CAACT,KAAK,CAACQ,GAAG,CAAC;MACpB,CAAC,SAAS;QACRT,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;EACF,CAAC;EAED,OAAO;IAAEL,eAAe;IAAEE,MAAM;IAAEE,OAAO;IAAEE,KAAK;IAAEE;EAAa,CAAC;AAClE,CAAC;AAACT,EAAA,CAjCID,cAAc;AAmCpB,eAAeA,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}